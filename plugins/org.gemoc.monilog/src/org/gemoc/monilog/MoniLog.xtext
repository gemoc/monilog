grammar org.gemoc.monilog.MoniLog with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.gemoc.org/instrument/InstrumentationInterface" as instrumentation

generate moniLog "http://www.gemoc.org/monilog/MoniLog"

Document:
	'package' name=QualifiedName
	imports+=Import*
	(setup=Setup)?
	(events+=Event* & appenders+=Appender* & layouts+=Layout* & moniloggers+=MoniLogger*);

Import:
	{ModelImport} 'import' importedNamespace=QualifiedNameWithWildcard | {FileImport} 'import' alias=FileAlias;

FileAlias:
	filePath=STRING 'as' name=ID;

Setup:
	{Setup} 'setup' '{' (properties+=PropertyDefinition (';' properties+=PropertyDefinition)* ';'?)? '}';

PropertyDefinition:
	property=Property ('=' value=Expression)?;

@Exported
Appender:
	LocalAppender | ExternalAppender;

LocalAppender:
	'appender' name=ID /*('(' parameterDecl=ParameterDeclVarArgs ')')?*/ '{'
		calls+=AppenderCall (';' calls+=AppenderCall)* ';'?
	'}';

ExternalAppender:
	'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?;

Layout:
	LocalLayout | ExternalLayout;

@Exported
LocalLayout:
	'layout' name=ID  /*('(' parameterDecl=ParameterDeclVarArgs ')')?*/ '{'
		call=LayoutCall
	'}';

@Exported
ExternalLayout:
	'layout' name=ID  ('(' parameterDecl=ParameterDeclVarArgs ')')?;

ParameterDeclVarArgs returns ParameterDecl:
	{ParameterDecl} (parameters+=PropertyDefinition (',' parameters+=PropertyDefinition)* (',' varArgs=PropertyDefinition '[' ']')?)?;

ParameterDeclNoVarArgs returns ParameterDecl:
	{ParameterDecl} (parameters+=PropertyDefinition (',' parameters+=PropertyDefinition)*)?;

@Exported
MoniLogger:
	annotations+=MoniLoggerAnnotation*
	'monilogger' name=ID  /*('(' parameterDecl=ParameterDeclVarArgs ')')?*/ '{'
		'when' streamEvent=StreamEvent
		(
			'if' '(' condition=Condition ')'
			'then' '{' (thenActions+=Action (';' thenActions+=Action)* ';'?)? '}'
			('else' '{' (elseActions+=Action (';' elseActions+=Action)* ';'?)? '}')?
		|
			'{' (thenActions+=Action (';' thenActions+=Action)* ';'?)? '}'
		)
	'}';

@Exported
Event:
	'event' (ASTEvent /*| {UserEvent} name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')?*/);

ASTEvent:
	{CallEvent} name=ID '{' kind=ASTEventKind 'call' element=[instrumentation::CallableElement|QualifiedName] ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '}' |
	{WriteEvent} name=ID '{' kind=ASTEventKind 'write' element=[instrumentation::WriteableElement|QualifiedName] '}';

ASTEventKind:
	{BeforeASTEvent} 'before'| {AfterASTEvent} 'after';

Condition:
	expression=Expression;

Action:
	LanguageCall | AppenderCall
	/* | EmitEvent */| MoniloggerCall
	| SetVariable;

AppenderCall:
	appender=[Appender|QualifiedName] '.' 'call' ( '(' (args+=Expression (',' args+=Expression)*)? ')' )?;

LayoutCall:
	layout=[Layout|QualifiedName] '.' 'call' ( '(' args+=Expression (',' args+=Expression)* ')' )?;

/*EmitEvent:
	event=[UserEvent|ID] '.' 'emit' ('(' (args+=Expression (',' args+=Expression)*)? ')' )?;*/

SetVariable:
	variable=PropertyReference '=' value=Expression;

MoniloggerCall:
	{StartMoniLogger} monilogger=[MoniLogger|ID] '.' 'start' ( '(' /*(args+=Expression (',' args+=Expression)*)? */ ')')? |
	{StopMoniLogger} monilogger=[MoniLogger|ID] '.' 'stop' ('(' ')')?;

LanguageCall:
	languageID=ID '(' file=[FileAlias|ID] '.' fqn=QualifiedName ('(' (args+=Expression (',' args+=Expression)*)? ')' )? ')';

StreamEvent:
	(prop=Property ':')? event=[Event|ID];

Property:
	name=ID;

PropertyReference:
	property=[Property|ID];

//==================================== SIMPLE EXPRESSIONS ====================================//

Expression:
	ContractedIf;

ContractedIf returns SimpleExpression:
	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;

Or returns SimpleExpression:
	And ({Or.left=current} op='||' right=And)*;

And returns SimpleExpression:
	Equality ({And.left=current} op='&&' right=Equality)*;

Equality returns SimpleExpression:
	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;

Comparison returns SimpleExpression:
	PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*;

PlusOrMinus returns SimpleExpression:
	MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;

MulOrDiv returns SimpleExpression:
	Modulo (({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*;

Modulo returns SimpleExpression:
	Primary ({Modulo.left=current} op='%' right=Primary)*;

Primary returns SimpleExpression:
	{Parenthesis} '(' expression=Expression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
	Atomic;

Atomic returns SimpleExpression:
	{IntConstant} value=INT | {RealConstant} value=REAL | {BoolConstant} (value?='true' | 'false') | {StringConstant} value=STRING |
	{FileContent} 'read' value=STRING | {VectorConstant} '[' values+=Expression (',' values+=Expression)* ']' | Ref | ArraySize | LanguageCall | LayoutCall;

Ref:
	VarRef ({ArrayRef.array=current} '[' indices+=Expression (',' indices+=Expression)* ']' |
	{FieldReference.object=current} '.' field=ID)*;

VarRef:
	PropertyReference | {ContextVarReference} 'context' '(' target=[instrumentation::ReadableElement|QualifiedName] ')';

ArraySize:
	'sizeOf' '(' array=Ref ')';

terminal REAL:
	INT '.' INT;

enum MoniLoggerAnnotation:
	inactive='@Inactive';

QualifiedName: ID ('.' ID)*;
QualifiedNameWithWildcard: QualifiedName '.*'?;